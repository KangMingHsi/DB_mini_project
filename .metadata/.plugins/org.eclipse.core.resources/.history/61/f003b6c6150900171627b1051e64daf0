package DBMS;

import java.util.*;
import DBMS.Field.Type;
import ExceptionHandlers.InsertionException;
import ExceptionHandlers.Warning;

/* * * * * * * * * * * * * * * * * * * * * * * 
 * initial value
 * havePrimaryKey false 
 * * * * * * * * * * * * * * * * * * * * * * */

public class Table {
	private String tableName;
	// private Schema schema;
	private ArrayList<Field> tuple;		//different order with the one in Record?
	private ArrayList<Record> membersWithOutPrimaryKey;
	private Hashtable<String, Record> membersWithPrimaryKey;	// problem: primary key may not be string
	private Field primaryKey;	// can be NULL
	private boolean havePrimaryKey;
	private Database parentDatabase;
	private HashMap<String, Integer> longestValueLength;
	public boolean errorFlag;
	
	
	/*Table Constructor*/
	/*************************************************************************/
	
	public Table(String name, Database parent) {
		this.tuple = new ArrayList<Field>();
		this.membersWithOutPrimaryKey = new ArrayList<Record>();
		this.membersWithPrimaryKey = new Hashtable<String, Record>();
		this.tableName = name;
		this.parentDatabase = parent;
		this.longestValueLength = new HashMap<String, Integer>();
		this.havePrimaryKey = false;
	}
	
	public Table(String name, ArrayList<Field> schema, Field primaryKey, Database parent) {
		this.tuple = schema;
		this.membersWithOutPrimaryKey = new ArrayList<Record>();
		this.membersWithPrimaryKey = new Hashtable<String, Record>();
		this.primaryKey = primaryKey;
		this.tableName = name;
		this.parentDatabase = parent;
		this.longestValueLength = new HashMap<String, Integer>();
		this.havePrimaryKey = false;
	}
	
	/*************************************************************************/
	
	public void setName(String name) {
		this.tableName = name;
	}
	
	public String getName() {
		return this.tableName;
	}
	
	public Record getRecordByPrimaryKey(String key) {
		return membersWithPrimaryKey.get(key);
	}
	
	public ArrayList<Field> getAttributesList() {
		return this.tuple;
	}
	
	public void printPrimaryKey() {
		System.out.println(primaryKey.getName());
	}
	
	/*Input Interface for field*/
	/*************************************************************************/
	
	
	/*multiple attribute, by field, with primary key(in string)*/
	public void addTableFieldByField(ArrayList<Field> schema, String primaryKey)
	{
		Type primaryType = Type.NULL;
		for(int i = 0; i < schema.size(); i++) {
			
			this.tuple.add(schema.get(i));
			if(schema.get(i).getName().equals(primaryKey)) {
				primaryType = schema.get(i).getType();				// need a not found error handle?
			}
			this.longestValueLength.put(schema.get(i).getName(), 0);
	    }
		this.primaryKey = new Field(primaryKey, this, primaryType);
		this.havePrimaryKey = true;
		
	}
	
	/*multiple attribute, by field, with primary key(in field)*/
	public void addTableFieldByField(ArrayList<Field> schema, Field primaryKey)
	{
		for(int i = 0; i < schema.size(); i++) {
			
			this.tuple.add(schema.get(i));
			this.longestValueLength.put(schema.get(i).getName(), 0);
	    }
		this.primaryKey = primaryKey;
		this.havePrimaryKey = true;
	}
	
	/*multiple attribute, by string, with primary key(string)*/
	public void addTableFieldByString(ArrayList<String> attributeName, ArrayList<String> attributeType, String primaryKey)
	{
		Type primaryType = Type.NULL;
		
		if(attributeName.size() != attributeType.size()) {
			System.out.println("INPUT SIZE NOT FIT");
		}
		
		for(int i = 0; i < attributeName.size(); i++){
			
			if(attributeName.get(i).equals(primaryKey)) {
				if(attributeType.get(i).equals("INT")) {
					primaryType = Type.INT;
				} else if(attributeType.get(i).equals("VARCHAR")) {
					primaryType = Type.VARCHAR;
				} else {
					System.out.println("INSERT TYPE NOT ALLOW");
				}
			}
			
			if(attributeType.get(i).equals("INT")) {
				this.tuple.add(new Field(attributeName.get(i), this, Type.INT, 0));
			} else if(attributeType.get(i).equals("VARCHAR")) {
				this.tuple.add(new Field(attributeName.get(i), this, Type.VARCHAR, 40));
			} else {
				System.out.println("INSERT TYPE NOT ALLOW");
			}
	    }
		
		this.primaryKey = new Field(primaryKey, this, primaryType, 40);		//40?
		havePrimaryKey = true;
	}
	
	/*single attribute, by string*/
	public void addTableFieldByString(String name, Type type)
	{
		this.tuple.add(new Field(name, this, type));
		for(int i = 0; i < membersWithOutPrimaryKey.size(); i++) {
			//membersWithOutPrimaryKey.get(i).addField(new Field(name, type));			// need error test 
			membersWithOutPrimaryKey.get(i).setNewData(name, type, 0, "");
		}
		this.longestValueLength.put(name, 0);
	}
	
	/*single attribute, by string with LenLimit*/
	public void addTableFieldByString(String name, Type type, int lenLimit)
	{
		this.tuple.add(new Field(name, this, type, lenLimit));
		for(int i = 0; i < membersWithOutPrimaryKey.size(); i++) {
			//membersWithOutPrimaryKey.get(i).addField(new Field(name, type));			// need error test 
			membersWithOutPrimaryKey.get(i).setNewData(name, type, 0, "");
		}
		this.longestValueLength.put(name, 0);
	}
	
	/*multiple attribute, by field, without primary key*/
	public void addTableFieldByField(ArrayList<Field> schema)
	{
		for(int i = 0; i < schema.size(); i++) {
			
			this.tuple.add(schema.get(i));
			this.longestValueLength.put(schema.get(i).getName(), 0);
	    }
	}
	
	/*multiple attribute, by string, without primary*/
	public void addTableFieldByString(ArrayList<String> attributeName, ArrayList<String> attributeType)
	{
		if(attributeName.size() != attributeType.size()) {
			System.out.println("INPUT SIZE NOT FIT");
		}
		
		for(int i = 0; i < attributeName.size(); i++){
			if(attributeType.get(i).equals("INT")) {
				this.tuple.add(new Field(attributeName.get(i), this, Type.INT, 0));
			} else if(attributeType.get(i).equals("VARCHAR")) {
				this.tuple.add(new Field(attributeName.get(i), this, Type.VARCHAR, 40));
			} else {
				System.out.println("INSERT TYPE NOT ALLOW");
			}
	    }
	}
	
	
	/*************************************************************************/
	
	public void addTableField(ArrayList<Field> schema, String primaryKey, int strLimit)
	{
		Type primaryType = Type.NULL;
		for(int i = 0; i < schema.size(); i++) {
			
			this.tuple.add(schema.get(i));
			if(schema.get(i).getName().equals(primaryKey)) {
				primaryType = schema.get(i).getType();				// need a not found error handle?
			}
	    }
		this.primaryKey = new Field(primaryKey, this, primaryType, strLimit);
		this.havePrimaryKey = true;
	}
	
	
	/*Input Interface for record*/
	/**
	 * @throws InsertionException 
	 * @throws Warning ***********************************************************************/
	
	public boolean addTableMemberByDefault (ArrayList<String> inputData) throws Warning, InsertionException
	{	
		ArrayList<TransactionData> tmp;
		tmp = new ArrayList<TransactionData>();
		
		
		if(this.havePrimaryKey == true) {
			for(int i = 0; i < this.tuple.size(); i++) {
				if(this.tuple.get(i).getName().equals(primaryKey.getName())) {
					if(i >= inputData.size()) {
						System.out.println("NO PRIMARY KEY INPUT");
						return false;
					}
				}
			}
		}
		
		
		
		for(int i = 0; i < this.tuple.size(); i++) {
			if(i < inputData.size()) {
				tmp.add(new TransactionData(this.tuple.get(i).getName(), this.tuple.get(i).getType(), inputData.get(i), this));
			} else {
				if(this.tuple.get(i).getType() == Type.INT) {
					tmp.add(new TransactionData(this.tuple.get(i).getName(), this.tuple.get(i).getType(), "0", this));
				} else if(this.tuple.get(i).getType() == Type.VARCHAR) {
					tmp.add(new TransactionData(this.tuple.get(i).getName(), this.tuple.get(i).getType(), "", this));
				}
			}
			if(tmp.get(tmp.size() - 1).createSuccessly == false) {
				return false;
			}
			
		}
		return this.addTableMember(tmp);
	}
	
	public boolean addTableMemberByString (ArrayList<String> inputName, ArrayList<String> inputData) throws Warning, InsertionException
	{	
		ArrayList<TransactionData> tmp;
		tmp = new ArrayList<TransactionData>();
		Type type = Type.NULL;
		
		boolean finder = false;
		for(int i = 0; i < inputName.size(); i++) {
			finder = false;
			for (int j= 0; j < this.tuple.size(); j++) {	
				if (inputName.get(i).equals(this.tuple.get(j).getName())) {
					finder = true;
				}
				
			}
			if(finder == false) {
				System.out.printf("CAN'T FIND THIS ATTRIBUTE %s\n", inputName.get(i));
				return false;
			}
		}
		
		
		
		for(int i = 0; i < this.tuple.size(); i++) {
			int index = -1;
			type = this.tuple.get(i).getType();
			for (int j= 0; j < inputName.size(); j++) {				// not a good search
				if (this.tuple.get(i).getName().equals(inputName.get(j))) {
					index = j;
					break;
				}
			}
			if(index == -1) {
				if(type == Type.INT) {
					tmp.add(new TransactionData(this.tuple.get(i).getName(), type, "0", this));
				} else if(type == Type.VARCHAR) {
					tmp.add(new TransactionData(this.tuple.get(i).getName(), type, "", this));
				}
			} else {
				if(type == Type.INT) {
					tmp.add(new TransactionData(inputName.get(index), type, inputData.get(index), this));
				} else if(type == Type.VARCHAR) {
					tmp.add(new TransactionData(inputName.get(index), type, inputData.get(index), this));
				}
			}
			if(tmp.get(tmp.size() - 1).createSuccessly == false) {
				return false;
			}
		}
		
		return this.addTableMember(tmp);
	}
	
	public boolean addTableMember(ArrayList<TransactionData> inputData) throws InsertionException
	{	
		
		if(havePrimaryKey == true) {
			for(int i = 0; i < inputData.size(); i++){
				if(inputData.get(i).getName().equals(primaryKey.getName())) {
					
					//repeat primary key check
					String pName = primaryKey.getName();
					for(int j = 0; j < membersWithOutPrimaryKey.size(); j++) {
						if(inputData.get(i).getType() == Type.INT) {			//check type with primary key?
							if(inputData.get(i).int_data == membersWithOutPrimaryKey.get(j).getData(pName).getIntData()) {
								System.out.println("Duplicate primary key");
								return false;
							}
						} else if(inputData.get(i).getType() == Type.VARCHAR) {
							if(inputData.get(i).str_data == membersWithOutPrimaryKey.get(j).getData(pName).getStrData()) {
								System.out.println("Duplicate primary key");
								return false;
							}
						} else {
							System.out.println("INSERT TYPE NOT ALLOW");
							return false;
						}
					}
				}
			}
		}
		
		Record newRecord = new Record(inputData, this);
		
		if(this.havePrimaryKey == false) {
			boolean checkSame = true;
			for(int i = 0; i < this.membersWithOutPrimaryKey.size(); i++) {
				for(int j = 0; j < this.tuple.size(); j++) {
					if(this.tuple.get(i).getType() == Type.INT) {
						if(newRecord.getData(this.tuple.get(i).getName()).getIntData() != membersWithOutPrimaryKey.get(i).getData(this.tuple.get(i).getName()).getIntData()) {
							checkSame = false;
							break;
						}
						
					} else if(this.tuple.get(i).getType() == Type.VARCHAR) {
						if(newRecord.getData(this.tuple.get(i).getName()).getStrData() != membersWithOutPrimaryKey.get(i).getData(this.tuple.get(i).getName()).getStrData()) {
							checkSame = false;
							break;
						}
					}
				}
				if(checkSame == false) {
					break;
				}
			}
			if(checkSame == true) {
				System.out.println("SAME RECORD WITH NO PRIMARY KEY");
				return false;
			}
		}
		
		//membersWithOutPrimaryKey.add(new Record(inputData, this));
		this.membersWithOutPrimaryKey.add(newRecord);
		
		for(int i = 0; i < inputData.size(); i++) {
			if(inputData.get(i).getType() == Type.INT) {
				if(String.valueOf(inputData.get(i).int_data).length() > this.longestValueLength.get(inputData.get(i).getName())) {
					this.longestValueLength.put(inputData.get(i).getName(), String.valueOf(inputData.get(i).int_data).length());
				}
			} else if(inputData.get(i).getType() == Type.VARCHAR) {
				if(inputData.get(i).str_data.length() > 40) {
					throw new InsertionException("INPUT STRING TOO LONG");
				}
				
				boolean finder = false;		// use error handler
				for(int j = 0; j < this.tuple.size(); j++) {
					if(this.tuple.get(j).getName() == inputData.get(i).getName()) {
						finder = true;
						break;
					}
				}
				if(finder == false) {
					continue;
				}
				
				if(inputData.get(i).str_data.length() > this.longestValueLength.get(inputData.get(i).getName())) {
					this.longestValueLength.put(inputData.get(i).getName(), inputData.get(i).str_data.length());
				}
				
			} else {
				throw new InsertionException("UNKNOW TYPE INSERTION");
			}
		}
		
		if(havePrimaryKey == true) {
			for(int i = 0; i < inputData.size(); i++){
				if(inputData.get(i).getName().equals(primaryKey.getName())) {
					
					if(primaryKey.getType() == Type.INT) {
						membersWithPrimaryKey.put(String.valueOf(inputData.get(i).int_data), membersWithOutPrimaryKey.get(membersWithOutPrimaryKey.size() - 1));
					} else if(primaryKey.getType() == Type.VARCHAR) {
						membersWithPrimaryKey.put(inputData.get(i).str_data, membersWithOutPrimaryKey.get(membersWithOutPrimaryKey.size() - 1));
					} else {
						throw new InsertionException("UNKNOW TYPE INSERTION");
					}
					
				}
			}
		}
		return true;

	}
	// a powerful function to update ob' 'ov
	public void updateFieldByField(String withThisField, String withThisValue, String intoThisField, String intoThisValue) {
		
		boolean finder = false;		// use error handler
		for(int j = 0; j < this.tuple.size(); j++) {
			if(this.tuple.get(j).getName() == withThisField) {
				finder = true;
				break;
			}
		}
		if(finder == false) {
			System.out.println("CAN'T FIND THIS INPUT ATTRIBUTE");
			return;
		}
		
		finder = false;		// use error handler
		for(int j = 0; j < this.tuple.size(); j++) {
			if(this.tuple.get(j).getName() == intoThisField) {
				System.out.println("CAN'T FIND THIS ATTRIBUTE TO UPDATE");
				finder = true;
				break;
			}
		}
		if(finder == false) {
			return;
		}
		
		for(int i = 0; i < membersWithOutPrimaryKey.size(); i++) {
			if(membersWithOutPrimaryKey.get(i).getData(withThisField).getType() == Type.INT) {
				if(membersWithOutPrimaryKey.get(i).getData(withThisField).getIntData() == Integer.parseInt(withThisValue)) {
					if(membersWithOutPrimaryKey.get(i).getData(intoThisField).getType() == Type.INT) {
						membersWithOutPrimaryKey.get(i).getData(intoThisField).setIntData(Integer.parseInt(intoThisValue));
					} else if(membersWithOutPrimaryKey.get(i).getData(intoThisField).getType() == Type.VARCHAR) {
						membersWithOutPrimaryKey.get(i).getData(intoThisField).setStrData(intoThisValue);
					}
				}
			} else if(membersWithOutPrimaryKey.get(i).getData(withThisField).getType() == Type.VARCHAR) {
				if(membersWithOutPrimaryKey.get(i).getData(withThisField).getStrData() == withThisValue) {
					if(membersWithOutPrimaryKey.get(i).getData(intoThisField).getType() == Type.INT) {
						membersWithOutPrimaryKey.get(i).getData(intoThisField).setIntData(Integer.parseInt(intoThisValue));
					} else if(membersWithOutPrimaryKey.get(i).getData(intoThisField).getType() == Type.VARCHAR) {
						membersWithOutPrimaryKey.get(i).getData(intoThisField).setStrData(intoThisValue);
					}
				}
			}
			
		}
	}
	
	/*************************************************************************/
	

	
	/*Print Function*/
	/*************************************************************************/
	
	public void printTableField()
	{
		System.out.println("Table: " + this.tableName);
		System.out.print("|-");
		for(int i = 0; i < this.tuple.size(); i++) {
			if(i == this.tuple.size() - 1) {
				System.out.print("----------------------{");
			} else {
				System.out.print("-----------------------");
			}
		}
		System.out.print("\n");
		
		System.out.print("||");
		for(int i = 0; i < this.tuple.size(); i++) {
			//s[i] = this.fieldList.get(i).getName();
			System.out.print( String.format("%-10s ||", this.tuple.get(i).getName() ));
		}
		System.out.print("\n");
	
		System.out.print("|-");
		for(int i = 0; i < this.tuple.size(); i++) {
			if(i == this.tuple.size() - 1) {
				System.out.print("----------------------}");
			} else {
				System.out.print("-----------------------");
			}
		}
		System.out.print("\n");
	}
	
	public void printAllRecord()
	{
		System.out.println("Table: " + this.tableName);
	
		for(int i = 0; i < membersWithOutPrimaryKey.size(); i++) {
			if(membersWithOutPrimaryKey.size() == 1) {
				membersWithOutPrimaryKey.get(i).printRecord(true, true, this.longestValueLength);
			} else if(i == membersWithOutPrimaryKey.size() - 1) {
				membersWithOutPrimaryKey.get(i).printRecord(false, true, this.longestValueLength);
			} else if(i == 0) {
				membersWithOutPrimaryKey.get(i).printRecord(true, false, this.longestValueLength);
			} else {
				membersWithOutPrimaryKey.get(i).printRecord(false, false, this.longestValueLength);
			}
		}
		
	}
	
	/*************************************************************************/
	
	
	
	// testing print
	public void printMaxLen() {
		for(int i = 0; i < this.tuple.size(); i++) {
			System.out.println(this.tuple.get(i).getName() + ": " + this.longestValueLength.get(this.tuple.get(i).getName()));
		}
		
	}
	
	
}
